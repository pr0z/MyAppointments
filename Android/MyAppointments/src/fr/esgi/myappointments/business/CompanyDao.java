package fr.esgi.myappointments.business;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fr.esgi.myappointments.business.Company;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMPANY.
*/
public class CompanyDao extends AbstractDao<Company, Long> {

    public static final String TABLENAME = "COMPANY";

    /**
     * Properties of entity Company.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniqueID = new Property(1, Integer.class, "uniqueID", false, "UNIQUE_ID");
        public final static Property SirenID = new Property(2, String.class, "sirenID", false, "SIREN_ID");
        public final static Property CompanyName = new Property(3, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property ContactFirstname = new Property(4, String.class, "contactFirstname", false, "CONTACT_FIRSTNAME");
        public final static Property ContactLastname = new Property(5, String.class, "contactLastname", false, "CONTACT_LASTNAME");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property CreationDate = new Property(9, java.util.Date.class, "creationDate", false, "CREATION_DATE");
    };


    public CompanyDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMPANY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UNIQUE_ID' INTEGER," + // 1: uniqueID
                "'SIREN_ID' TEXT," + // 2: sirenID
                "'COMPANY_NAME' TEXT NOT NULL ," + // 3: companyName
                "'CONTACT_FIRSTNAME' TEXT NOT NULL ," + // 4: contactFirstname
                "'CONTACT_LASTNAME' TEXT NOT NULL ," + // 5: contactLastname
                "'ADDRESS' TEXT NOT NULL ," + // 6: address
                "'EMAIL' TEXT NOT NULL ," + // 7: email
                "'PHONE' TEXT NOT NULL ," + // 8: phone
                "'CREATION_DATE' INTEGER);"); // 9: creationDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMPANY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Company entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer uniqueID = entity.getUniqueID();
        if (uniqueID != null) {
            stmt.bindLong(2, uniqueID);
        }
 
        String sirenID = entity.getSirenID();
        if (sirenID != null) {
            stmt.bindString(3, sirenID);
        }
        stmt.bindString(4, entity.getCompanyName());
        stmt.bindString(5, entity.getContactFirstname());
        stmt.bindString(6, entity.getContactLastname());
        stmt.bindString(7, entity.getAddress());
        stmt.bindString(8, entity.getEmail());
        stmt.bindString(9, entity.getPhone());
 
        java.util.Date creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(10, creationDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Company readEntity(Cursor cursor, int offset) {
        Company entity = new Company( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // uniqueID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sirenID
            cursor.getString(offset + 3), // companyName
            cursor.getString(offset + 4), // contactFirstname
            cursor.getString(offset + 5), // contactLastname
            cursor.getString(offset + 6), // address
            cursor.getString(offset + 7), // email
            cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // creationDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Company entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniqueID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSirenID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyName(cursor.getString(offset + 3));
        entity.setContactFirstname(cursor.getString(offset + 4));
        entity.setContactLastname(cursor.getString(offset + 5));
        entity.setAddress(cursor.getString(offset + 6));
        entity.setEmail(cursor.getString(offset + 7));
        entity.setPhone(cursor.getString(offset + 8));
        entity.setCreationDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Company entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Company entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
