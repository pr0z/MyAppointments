package fr.esgi.myappointments.business;

import fr.esgi.myappointments.business.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.Date;

import android.os.Parcel;
import android.os.Parcelable;
// KEEP INCLUDES END
/**
 * Entity mapped to table USER.
 */
public class User implements Parcelable {

    private Long id;
    private Integer serverId;
    /** Not-null value. */
    private String firstname;
    /** Not-null value. */
    private String lastname;
    /** Not-null value. */
    private String phone;
    /** Not-null value. */
    private String email;
    private String password;
    private java.util.Date creationDate;
    private java.util.Date birthDate;
    private Long locationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Location location;
    private Long location__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Integer serverId, String firstname, String lastname, String phone, String email, String password, java.util.Date creationDate, java.util.Date birthDate, Long locationId) {
        this.id = id;
        this.serverId = serverId;
        this.firstname = firstname;
        this.lastname = lastname;
        this.phone = phone;
        this.email = email;
        this.password = password;
        this.creationDate = creationDate;
        this.birthDate = birthDate;
        this.locationId = locationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getServerId() {
        return serverId;
    }

    public void setServerId(Integer serverId) {
        this.serverId = serverId;
    }

    /** Not-null value. */
    public String getFirstname() {
        return firstname;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /** Not-null value. */
    public String getLastname() {
        return lastname;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /** Not-null value. */
    public String getPhone() {
        return phone;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public java.util.Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(java.util.Date creationDate) {
        this.creationDate = creationDate;
    }

    public java.util.Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(java.util.Date birthDate) {
        this.birthDate = birthDate;
    }

    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(Long locationId) {
        this.locationId = locationId;
    }

    /** To-one relationship, resolved on first access. */
    public Location getLocation() {
        Long __key = this.locationId;
        if (location__resolvedKey == null || !location__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationDao targetDao = daoSession.getLocationDao();
            Location locationNew = targetDao.load(__key);
            synchronized (this) {
                location = locationNew;
            	location__resolvedKey = __key;
            }
        }
        return location;
    }

    public void setLocation(Location location) {
        synchronized (this) {
            this.location = location;
            locationId = location == null ? null : location.getId();
            location__resolvedKey = locationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public static final Parcelable.Creator<User> CREATOR = new Parcelable.Creator<User>() {
		@Override
		public User createFromParcel(Parcel in) {
			return new User(in);
		}

		@Override
		public User[] newArray(int size) {
			return new User[size];
		}
	};
	
	private User(Parcel in) {
		readFromParcel(in);
	}
	
    @Override
    public int describeContents() {
    	return 0;
    }
    
    @Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(id);
		dest.writeInt(serverId);
		dest.writeString(firstname);
		dest.writeString(lastname);
		dest.writeString(phone);
		dest.writeString(email);
		dest.writeString(password);
		dest.writeLong((creationDate != null) ? creationDate.getTime() : 0);
		dest.writeLong((birthDate != null) ? birthDate.getTime() : 0);
	}

	public void readFromParcel(Parcel in) {
		id = in.readLong();
		serverId = in.readInt();
		firstname = in.readString();
		lastname = in.readString();
		phone = in.readString();
		email = in.readString();
		password = in.readString();
		creationDate = new Date(in.readLong());
		birthDate = new Date(in.readLong());
	}
    // KEEP METHODS END

}
