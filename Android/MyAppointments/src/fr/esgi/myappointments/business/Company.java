package fr.esgi.myappointments.business;

import fr.esgi.myappointments.business.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.Date;

import android.os.Parcel;
import android.os.Parcelable;
import de.greenrobot.dao.AbstractDao;
// KEEP INCLUDES END
/**
 * Entity mapped to table COMPANY.
 */
public class Company implements Parcelable {

    private Long id;
    private Integer serverId;
    private String siren;
    /** Not-null value. */
    private String companyName;
    /** Not-null value. */
    private String contactFirstname;
    /** Not-null value. */
    private String contactLastname;
    /** Not-null value. */
    private String email;
    /** Not-null value. */
    private String phone;
    private java.util.Date creationDate;
    private long categoryId;
    private long addressId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CompanyDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private Address address;
    private Long address__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Company() {
    }

    public Company(Long id) {
        this.id = id;
    }

    public Company(Long id, Integer serverId, String siren, String companyName, String contactFirstname, String contactLastname, String email, String phone, java.util.Date creationDate, long categoryId, long addressId) {
        this.id = id;
        this.serverId = serverId;
        this.siren = siren;
        this.companyName = companyName;
        this.contactFirstname = contactFirstname;
        this.contactLastname = contactLastname;
        this.email = email;
        this.phone = phone;
        this.creationDate = creationDate;
        this.categoryId = categoryId;
        this.addressId = addressId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCompanyDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getServerId() {
        return serverId;
    }

    public void setServerId(Integer serverId) {
        this.serverId = serverId;
    }

    public String getSiren() {
        return siren;
    }

    public void setSiren(String siren) {
        this.siren = siren;
    }

    /** Not-null value. */
    public String getCompanyName() {
        return companyName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    /** Not-null value. */
    public String getContactFirstname() {
        return contactFirstname;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContactFirstname(String contactFirstname) {
        this.contactFirstname = contactFirstname;
    }

    /** Not-null value. */
    public String getContactLastname() {
        return contactLastname;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContactLastname(String contactLastname) {
        this.contactLastname = contactLastname;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    /** Not-null value. */
    public String getPhone() {
        return phone;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    public java.util.Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(java.util.Date creationDate) {
        this.creationDate = creationDate;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    public long getAddressId() {
        return addressId;
    }

    public void setAddressId(long addressId) {
        this.addressId = addressId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        if (category == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.category = category;
            categoryId = category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Address getAddress() {
        long __key = this.addressId;
        if (address__resolvedKey == null || !address__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            Address addressNew = targetDao.load(__key);
            synchronized (this) {
                address = addressNew;
            	address__resolvedKey = __key;
            }
        }
        return address;
    }

    public void setAddress(Address address) {
        if (address == null) {
            throw new DaoException("To-one property 'addressId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.address = address;
            addressId = address.getId();
            address__resolvedKey = addressId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public static final Parcelable.Creator<Company> CREATOR = new Parcelable.Creator<Company>() {
		@Override
		public Company createFromParcel(Parcel in) {
			return new Company(in);
		}

		@Override
		public Company[] newArray(int size) {
			return new Company[size];
		}
	};
	
	private Company(Parcel in) {
		readFromParcel(in);
	}
	
    @Override
    public int describeContents() {
    	return 0;
    }
    
    @Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(id);
		dest.writeInt(serverId);
		dest.writeString(siren);
		dest.writeString(companyName);
		dest.writeString(contactFirstname);
		dest.writeString(contactLastname);
//		dest.writeString(address);
		dest.writeString(email);
		dest.writeString(phone);
		dest.writeLong((creationDate != null) ? creationDate.getTime() : 0);
		dest.writeLong(categoryId);
		dest.writeLong(addressId);
	}

	public void readFromParcel(Parcel in) {
		id = in.readLong();
		serverId = in.readInt();
		siren = in.readString();
		companyName = in.readString();
		contactFirstname = in.readString();
		contactLastname = in.readString();
//		address = in.readString();
		email = in.readString();
		phone = in.readString();
		creationDate = new Date(in.readLong());
		categoryId = in.readLong();
		addressId = in.readLong();
	}
    // KEEP METHODS END

}
