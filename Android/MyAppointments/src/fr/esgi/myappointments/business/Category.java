package fr.esgi.myappointments.business;

import fr.esgi.myappointments.business.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.os.Parcel;
import android.os.Parcelable;
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORY.
 */
public class Category implements Parcelable {

    private Long id;
    private Integer serverId;
    /** Not-null value. */
    private String label;
    private Long parentCategoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private Category parentCategory;
    private Long parentCategory__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, Integer serverId, String label, Long parentCategoryId) {
        this.id = id;
        this.serverId = serverId;
        this.label = label;
        this.parentCategoryId = parentCategoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getServerId() {
        return serverId;
    }

    public void setServerId(Integer serverId) {
        this.serverId = serverId;
    }

    /** Not-null value. */
    public String getLabel() {
        return label;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLabel(String label) {
        this.label = label;
    }

    public Long getParentCategoryId() {
        return parentCategoryId;
    }

    public void setParentCategoryId(Long parentCategoryId) {
        this.parentCategoryId = parentCategoryId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getParentCategory() {
        Long __key = this.parentCategoryId;
        if (parentCategory__resolvedKey == null || !parentCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category parentCategoryNew = targetDao.load(__key);
            synchronized (this) {
                parentCategory = parentCategoryNew;
            	parentCategory__resolvedKey = __key;
            }
        }
        return parentCategory;
    }

    public void setParentCategory(Category parentCategory) {
        synchronized (this) {
            this.parentCategory = parentCategory;
            parentCategoryId = parentCategory == null ? null : parentCategory.getId();
            parentCategory__resolvedKey = parentCategoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public static final Parcelable.Creator<Category> CREATOR = new Parcelable.Creator<Category>() {
		@Override
		public Category createFromParcel(Parcel in) {
			return new Category(in);
		}

		@Override
		public Category[] newArray(int size) {
			return new Category[size];
		}
	};
	
	private Category(Parcel in) {
		readFromParcel(in);
	}
	
    @Override
    public int describeContents() {
    	return 0;
    }
    
    @Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(id);
		dest.writeInt(serverId);
		dest.writeString(label);
		dest.writeLong(parentCategoryId);
	}

	public void readFromParcel(Parcel in) {
		id = in.readLong();
		serverId = in.readInt();
		label = in.readString();
		parentCategoryId = in.readLong();
	}
	
	@Override
	public String toString() {
		return label;
	}
    // KEEP METHODS END

}
